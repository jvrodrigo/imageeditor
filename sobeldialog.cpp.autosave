#include "sobeldialog.h"

SobelDialog::SobelDialog(ImgWin *parent) :
    QDialog(parent)
{
    imgM = parent->getMImg(); // Obtiene la imagen QImage Principal
    imgL = parent->getLabelImg(); // Obtiene el label de la QImage Principal
    // Slider
    slthreshold = new QSlider(Qt::Horizontal) ;
    slthreshold->setRange(0,100);
    slthreshold->setValue(1);
    slthreshold->setToolTip("Threshold Sobel");
    disp = new QLCDNumber(3);
    disp->display(100);

    //Botones
    applyB = new QPushButton("Aplicar");
    exitB = new QPushButton("Salir");

    tLay = new QVBoxLayout();// Layout herramientas

    tLay->addWidget(disp);
    tLay->addWidget(slthreshold);

    tLay->addWidget(applyB);
    tLay->addWidget(exitB);

    setLayout(tLay);

    viewSobel(); // Empieza la funcion ver Sobel

    connect(exitB,SIGNAL(clicked()) ,this,SLOT(exit()));
    connect(applyB,SIGNAL(clicked()) ,this,SLOT(applyChanges()));
    connect(slthreshold,SIGNAL(valueChanged(int)) , disp , SLOT(display(int)));
    connect(slthreshold,SIGNAL(valueChanged(int)) , this,SLOT(viewSobel()));

}
void SobelDialog::applyChanges(){

}

void SobelDialog::exit(){
    imgL->setPixmap(QPixmap::fromImage(imgM));
    close();
}
void SobelDialog::viewSobel(){

    int ddepth = CV_16S;
    int scale = 1;
    int delta = 0;
    cv::Mat src_gray;
    src = QImage2Mat(imgM);
    cv::GaussianBlur( src, src, cv::Size(3,3), 0, 0, cv::BORDER_DEFAULT );


    /// Convert it to gray
    cv::cvtColor( src, src_gray, CV_RGB2GRAY );

    /// Generate grad, grad_x and grad_y

    cv::Mat grad, grad_x, grad_y;
    cv::Mat abs_grad_x, abs_grad_y;

    /// Gradient X
    //Scharr( src_gray, grad_x, ddepth, 1, 0, scale, delta, BORDER_DEFAULT );
    cv::Sobel( src_gray, grad_x, ddepth, 1, 0, 3, slthreshold->value(), delta, cv::BORDER_DEFAULT );
    cv::convertScaleAbs( grad_x, abs_grad_x );
    
    /// Gradient Y
    //Scharr( src_gray, grad_y, ddepth, 0, 1, scale, delta, BORDER_DEFAULT );
    cv::Sobel( src_gray, grad_y, ddepth, 0, 1, 3, slthreshold->value(), delta, cv::BORDER_DEFAULT );
    cv::convertScaleAbs( grad_y, abs_grad_y );

      /// Total Gradient (approximate)
    cv::addWeighted( abs_grad_x, 0.5, abs_grad_y, 0.5, 0, grad );
    imgL->setPixmap(QPixmap::fromImage(Mat2QImage(grad)));
}

QImage SobelDialog::Mat2QImage(cv::Mat const& src)
{
    QImage dest(src.cols, src.rows, QImage::Format_ARGB32);

      const float scale = 255.0;

      if (src.depth() == CV_8U) {
        if (src.channels() == 1) {
          for (int i = 0; i < src.rows; ++i) {
            for (int j = 0; j < src.cols; ++j) {
              int level = src.at<quint8>(i, j);
              dest.setPixel(j, i, qRgb(level, level, level));
            }
          }
        } else if (src.channels() == 3) {
          for (int i = 0; i < src.rows; ++i) {
            for (int j = 0; j < src.cols; ++j) {
              cv::Vec3b bgr = src.at<cv::Vec3b>(i, j);
              dest.setPixel(j, i, qRgb(bgr[2], bgr[1], bgr[0]));
            }
          }
        }
      } else if (src.depth() == CV_32F) {
        if (src.channels() == 1) {
          for (int i = 0; i < src.rows; ++i) {
            for (int j = 0; j < src.cols; ++j) {
              int level = scale * src.at<float>(i, j);
              dest.setPixel(j, i, qRgb(level, level, level));
            }
          }
        } else if (src.channels() == 3) {
          for (int i = 0; i < src.rows; ++i) {
            for (int j = 0; j < src.cols; ++j) {
              cv::Vec3f bgr = scale * src.at<cv::Vec3f>(i, j);
              dest.setPixel(j, i, qRgb(bgr[2], bgr[1], bgr[0]));
            }
          }
        }
      }

      return dest;
}

cv::Mat SobelDialog::QImage2Mat(QImage const& src)
{
     cv::Mat tmp(src.height(),src.width(),CV_8UC4,(uchar*)src.bits(),src.bytesPerLine());
     cv::Mat result; // deep copy just in case (my lack of knowledge with open cv)
     cv::cvtColor(tmp, result,CV_BGR2RGB);
     return result;
}
